<?xml version="1.0" encoding="UTF-8" ?>

<project name="KlaverjasAIChallenge" default="compile" basedir=".">
  <property name="creator.name" value="Joost Pastoor and Frank Versnel" />

  <property name="version" value="1.5" />

  <!-- Directories used -->
  <property name="dir.source" location="src" />
  <property name="dir.build" location="bin" />
  <property name="dir.distribution" location="dist" />
  <property name="dir.logfiles" location="log" />
  <property name="dir.libraries" location="lib" />
  <property name="dir.dependency.cache" location="depcache" />
  <property name="dir.resources" location="${dir.source}/resources" />

  <!-- Compilation related properties -->
  <property name="preferred.java.version" value="1.6" />
  <property name="compilation.debug" value="true" />
  <property name="compilation.includeAntRuntime" value="false" />

  <!-- Testing related properties -->
  <property name="testing.formatter.type" value="plain" />
  <property name="testing.printsummary" value="yes" />
  <property name="testing.haltonfailure" value="yes" />
  <property name="testing.java.files" value="**/*Test*.java" />
  <property name="testing.class.files" value="**/*Test*.class" />

  <!-- The distribution file to be created -->
  <property name="distribution.file" value="${dir.distribution}/klaverjas.jar" />
  <property name="distribution.shared.file"
      value="${dir.distribution}/klaverjas.shared.jar" />

  <!-- The application's entrypoint -->
  <property name="main.class" value="org.klaverjasaichallenge.engine.Main" />

   <!-- Dependency checking related properties -->
  <property name="dependency.check.closure" value="true" />

  <!-- Libraries included in the full jar -->
  <property name="library.slf4j.api" value="${dir.libraries}/slf4j-api-1.6.1.jar"/>
  <property name="library.logback.core" value="${dir.libraries}/logback-core-0.9.29.jar"/>
  <property name="library.logback.classic" value="${dir.libraries}/logback-classic-0.9.29.jar"/>
  <property name="library.guava" value="${dir.libraries}/guava-10.0.1.jar"/>

  <!-- Project class path -->
  <path id="project.class.path">
    <fileset dir="${dir.libraries}">
      <include name="*.jar"/>
    </fileset>
  </path>

  <!-- Performs tasks useful to all other targets in the ant file, outputs
       information about Ant, Java and the operation system. -->
  <target name="initialize">
    <!-- Create the time stamp -->
    <tstamp/>

    <echo>Using: ${ant.version}</echo>
    <echo>Using: Java version ${ant.java.version} (${java.vendor})</echo>
    <echo>Using: Java version ${preferred.java.version} to compile source files</echo>
    <echo>Project: ${ant.project.name} (${version})</echo>
    <echo>Project base directory: ${basedir}</echo>
    <echo>Operating System: ${os.name} ${os.version} (${os.arch})</echo>
  </target>

  <target name="check_dependencies" depends="initialize">
    <depend srcdir="${dir.source}" destdir="${dir.build}"
        cache="${dir.dependency.cache}" closure="${dependency.check.closure}">
      <include name="**/*.java" />
    </depend>
  </target>

  <target name="compile" depends="check_dependencies" description="Compiles the source files and outputs them to the 'build' directory.">
    <mkdir dir="${dir.build}" />
    <javac srcdir="${dir.source}" destdir="${dir.build}"
        classpathref="project.class.path" target="${preferred.java.version}"
        source="${preferred.java.version}"
        includeAntRuntime="${compilation.includeAntRuntime}"
        debug="${compilation.debug}">
    </javac>
  </target>

  <target name="test" depends="compile" description="Unit test the project.">
    <mkdir dir="${dir.logfiles}" />
    <junit printsummary="${testing.printsummary}"
        haltonfailure="${testing.haltonfailure}">
      <formatter type="${testing.formatter.type}" />

      <classpath>
        <pathelement location="${dir.build}" />
        <path refid="project.class.path" />
      </classpath>

      <batchtest todir="${dir.logfiles}">
        <fileset dir="${dir.build}">
          <include name="${testing.class.files}" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="shared_distribution" depends="test" description="Creates a jar file of all the classes that an AI can use. This jar file should be used to compile your AI.">
    <mkdir dir="${dir.distribution}" />
    <manifest file="${dir.distribution}/MANIFEST.MF">
      <attribute name="Specification-Version" value="${version}"/>
      <attribute name="Implementation-Version" value="${version} ${TODAY}"/>
    </manifest>
    <jar destfile="${distribution.shared.file}"
        manifest="${dir.distribution}/MANIFEST.MF">
      <fileset dir="${dir.build}"
        includes="org/klaverjasaichallenge/shared/**/*.class"
          excludes="${testing.class.files}" />
      <fileset dir="${dir.source}"
        includes="org/klaverjasaichallenge/shared/**/*.java"
          excludes="${testing.java.files}" />
    </jar>
    <delete file="${dir.distribution}/MANIFEST.MF" />
  </target>

  <target name="full_distribution" depends="shared_distribution" description="Creates a jar file containing all class and source files. This jar file can be used to let AI's play klaverjas with each other.">
    <manifest file="${dir.distribution}/MANIFEST.MF">
      <attribute name="Specification-Version" value="${version}"/>
      <attribute name="Implementation-Version" value="${version} ${TODAY}"/>
      <attribute name="Main-Class" value="${main.class}" />
    </manifest>
    <jar destfile="${distribution.file}" manifest="${dir.distribution}/MANIFEST.MF" >
      <fileset dir="${dir.build}" includes="**/*.class"
          excludes="${testing.class.files}" />
      <fileset dir="${dir.resources}" includes="**/*.*"/>
      <zipfileset src="${library.slf4j.api}"/>
      <zipfileset src="${library.logback.core}"/>
      <zipfileset src="${library.logback.classic}"/>
      <zipfileset src="${library.guava}"/>
    </jar>
    <delete file="${dir.distribution}/MANIFEST.MF" />
  </target>

  <target name="run" depends="full_distribution" description="Run the distribution.">
    <java jar="${distribution.file}" fork="true" >
      <!-- Enable assertions -->
      <jvmarg value ="-ea"/>

      <arg value="StupidButLegalAI"/>
      <arg value="StupidButLegalAI"/>
      <arg value="10"/>
    </java>
  </target>

  <target name="clean" description="Removes all generated files and directories.">
    <delete dir="${dir.build}" />
    <delete dir="${dir.distribution}" />
    <delete dir="${dir.logfiles}" />
    <delete dir="${dir.dependency.cache}" />
  </target>

</project>
